// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc8889.BBJWG;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    
    public static final double POTSTOWVOLTAGE = 3.4;
    public static final double POTOUTVOLTAGE = 1.7;
    
    public static final int xboxControllerPort = 1;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainMotorRight;
    public static SpeedController drivetrainMotorLeft;
    public static RobotDrive drivetrainRobotDrive;
    public static AnalogChannel bridgeArmPotBridgeArm;
    public static SpeedController bridgeArmMotorBridgeArm;
    public static Relay conveyorSpikeConveyor;
    public static Relay pickupSpikePickup;
    public static SpeedController shooterMotorShooter;
    public static Relay shooterSpikeShooterLights;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainMotorRight = new Victor(1, 2);
	LiveWindow.addActuator("Drivetrain", "MotorRight", (Victor) drivetrainMotorRight);
        
        drivetrainMotorLeft = new Victor(1, 1);
	LiveWindow.addActuator("Drivetrain", "MotorLeft", (Victor) drivetrainMotorLeft);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainMotorLeft, drivetrainMotorRight);
	
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);        
        bridgeArmPotBridgeArm = new AnalogChannel(1, 4);
	LiveWindow.addSensor("BridgeArm", "PotBridgeArm", bridgeArmPotBridgeArm);
        
        bridgeArmMotorBridgeArm = new Victor(1, 3);
	LiveWindow.addActuator("BridgeArm", "MotorBridgeArm", (Victor) bridgeArmMotorBridgeArm);
        
        conveyorSpikeConveyor = new Relay(1, 1);
	LiveWindow.addActuator("Conveyor", "SpikeConveyor", conveyorSpikeConveyor);
        
        pickupSpikePickup = new Relay(1, 2);
	LiveWindow.addActuator("Pickup", "SpikePickup", pickupSpikePickup);
        
        shooterMotorShooter = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "MotorShooter", (Victor) shooterMotorShooter);
        
        shooterSpikeShooterLights = new Relay(1, 3);
	LiveWindow.addActuator("Shooter", "SpikeShooterLights", shooterSpikeShooterLights);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
