// RobotBuilder Version: 1.0
// 
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc8889.BBJWG;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc8889.BBJWG.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    public XboxController xbox1;

    public OI() {
        xbox1 = new XboxController(RobotMap.xboxControllerPort);

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Stow Arm", new StowArm());
        SmartDashboard.putData("Up Arm", new UpArm());
        SmartDashboard.putData("Shooter Control", new ShooterControl());
        SmartDashboard.putData("Move Arm", new MoveArm());
        SmartDashboard.putData("Conveyor Up", new ConveyorUp());
        
        new JoystickButton(xbox1, XboxController.ButtonType.kA.value).whileHeld(new PickupIn());
        new JoystickButton(xbox1, XboxController.ButtonType.kB.value).whileHeld(new PickupOut());
        new JoystickButton(xbox1, XboxController.ButtonType.kX.value).whenPressed(new StowArm());
        new JoystickButton(xbox1, XboxController.ButtonType.kY.value).whenPressed(new UpArm());               
        new JoystickButton(xbox1, XboxController.ButtonType.kR.value).whileHeld(new ConveyorUp());
        new JoystickButton(xbox1, XboxController.ButtonType.kL.value).whileHeld(new ConveyorDown());
        new JoystickButton(xbox1, XboxController.ButtonType.kStart.value).whileHeld(new LightsOn());
        
        // Use default command not trigger on press
        // new JoystickButton(xbox1, XboxController.AxisType.kDLeftRight.value).whileHeld(new MoveArm());    
        // new JoystickButton(xbox1, XboxController.AxisType.kTrigger.value).whileHeld(new ShooterControl());
    }
    
}